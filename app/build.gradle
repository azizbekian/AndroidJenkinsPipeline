/*
 * Copyright 2015 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'

android {
    buildToolsVersion "25.0.2"
    compileSdkVersion 25

    dataBinding {
        enabled = true
    }

    defaultConfig {
        applicationId "com.google.samples.apps.topeka"
        minSdkVersion 14
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled true
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}

ext {
    supportLibVersion = "25.2.0"
    espressoVersion = "2.2.2"
    androidTestVersion = "0.5"
    hamcrestVersion = "1.3"
    junitVersion = "4.12"
}

dependencies {
    compile "com.android.support:appcompat-v7:${supportLibVersion}"
    compile "com.android.support:cardview-v7:${supportLibVersion}"
    compile "com.android.support:design:${supportLibVersion}"
    compile "com.android.support:recyclerview-v7:${supportLibVersion}"
    compile "com.android.support.test.espresso:espresso-idling-resource:${espressoVersion}"
    testCompile "junit:junit:${junitVersion}"

    androidTestCompile("com.android.support.test.espresso:espresso-core:${espressoVersion}") {
        exclude group: "com.android.support.test", module: "runner"
        exclude group:"org.hamcrest", module:"hamcrest-library"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:${espressoVersion}") {
        exclude module: "espresso-core"
        exclude group: "com.android.support", module: "support-v4"
        exclude module: 'recyclerview-v7'
        exclude module: 'appcompat-v7'
        exclude module: 'design'
    }

    androidTestCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
    androidTestCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    androidTestCompile ("com.android.support.test:runner:0.5") {
        exclude group: "com.android.support", module: "support-annotations"
    }
}

configurations {
    androidTestCompile.exclude group: 'com.android.support', module: 'support-v4'
}

def getDevices() {
    def adb = android.getAdbExe()
    project.ext.dev = [adb, 'devices'].execute().text.readLines()[1..<-1].collect { it.split()[0] }
}

project.afterEvaluate {
    project.("connectedDebugAndroidTest").doFirst {
        def originalProvider = deviceProvider
        deviceProvider = [
                getName       : { originalProvider.getName() },
                init          : { originalProvider.init() },
                terminate     : { originalProvider.terminate() },
                getDevices    : { filterDevices(originalProvider.getDevices()) },
                getTimeoutInMs: { originalProvider.getTimeoutInMs() },
                isConfigured  : { originalProvider.isConfigured() },
                getMaxThreads : { originalProvider.getMaxThreads() }
        ] as com.android.builder.testing.api.DeviceProvider
    }
}

def filterDevices(connectedDevices) {
    def DEVICES_PROPERTY = "devices"
    def devices = connectedDevices
    if (project.hasProperty(DEVICES_PROPERTY)) {
        def devicesSerials = project.getProperties().get(DEVICES_PROPERTY).split(/,/)
        devices = connectedDevices.findAll { devicesSerials.contains(it.serialNumber) }
        println "${!devices.empty ? "Execute on: ${devices.collect { it.serialNumber }}" : "Devices not found"}"
    }

    devices
}
